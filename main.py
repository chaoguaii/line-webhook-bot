from flask import Flask, request, jsonify
import requests
import os
import google.auth
from googleapiclient.discovery import build
from google.cloud import bigquery  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BigQuery

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö local
from dotenv import load_dotenv
load_dotenv()

app = Flask(__name__)

# üîπ ‡πÇ‡∏´‡∏•‡∏î Environment Variables (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Cloud Run ‡∏´‡∏£‡∏∑‡∏≠ local)
LINE_ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")  # Spreadsheet ID ‡∏Ç‡∏≠‡∏á Google Sheets
SHEET_NAME = os.getenv("SHEET_NAME", "Data")  # ‡∏ä‡∏∑‡πà‡∏≠ sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
MATERIAL_COSTS_SHEET = "MATERIAL_COSTS"  # ‡∏ä‡∏∑‡πà‡∏≠ sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MATERIAL_COSTS

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BigQuery
BIGQUERY_DATASET = os.getenv("BIGQUERY_DATASET")
BIGQUERY_TABLE = os.getenv("BIGQUERY_TABLE")

print("LINE_ACCESS_TOKEN:", LINE_ACCESS_TOKEN)

# üîπ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
USER_SESSIONS = {}

# üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏ (‡∏ö‡∏≤‡∏ó/kg) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å Google Sheets)
MATERIAL_COSTS = {}

def load_material_costs():
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Google Sheets ‡∏à‡∏≤‡∏Å sheet "MATERIAL_COSTS"
    ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤ sheet ‡∏ô‡∏µ‡πâ‡∏°‡∏µ header ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡πÇ‡∏î‡∏¢:
      - ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A: Material
      - ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B: Cost
    """
    SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
    credentials, _ = google.auth.default(scopes=SCOPES)
    service = build('sheets', 'v4', credentials=credentials)
    range_name = f"{MATERIAL_COSTS_SHEET}!A2:B"
    result = service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID,
        range=range_name
    ).execute()
    values = result.get("values", [])
    costs = {}
    for row in values:
        if len(row) >= 2:
            material = row[0].strip()
            try:
                cost = float(row[1].strip())
            except ValueError:
                cost = 0
            costs[material] = cost
    print("Loaded MATERIAL_COSTS:", costs)
    return costs

@app.route("/", methods=["GET"])
def home():
    return "LINE Webhook is running", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.method == "POST":
        data = request.json
        print("üì© Received:", data)
        for event in data.get("events", []):
            user_id = event["source"]["userId"]
            if "message" in event:
                message_text = event["message"]["text"].strip()
                print(f"üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å {user_id}: {message_text}")

                if message_text.lower() == "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠":
                    send_contact_menu(user_id)
                    continue
                if message_text.upper().startswith("FAQ"):
                    process_faq(user_id, message_text)
                    continue
                if message_text.lower() == "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£":
                    send_services_menu(user_id)
                    continue
                if message_text in ["‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]:
                    process_services(user_id, message_text)
                    continue
                if message_text.lower() == "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì":
                    start_questionnaire(user_id)
                else:
                    process_response(user_id, message_text)
        return jsonify({"status": "ok"}), 200
    else:
        return jsonify({"error": "Method Not Allowed"}), 405

# ------------------ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Contact & FAQ ------------------

def send_contact_menu(user_id):
    text = (
        "üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤\n\n"
        "‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå FAQ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:\n"
        "FAQ 1: Email\n"
        "FAQ 2: ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå\n"
        "FAQ 3: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£\n"
        "FAQ 4: ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà\n"
        "FAQ 5: ‡∏û‡∏¥‡∏Å‡∏±‡∏î"
    )
    send_message(user_id, text)

def process_faq(user_id, message_text):
    faq = message_text.strip().upper()
    if faq == "FAQ 1":
        send_message(user_id, "üìß Email: bestwellplastic@gmail.com")
    elif faq == "FAQ 2":
        send_message(user_id, "üìû ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 02 813 8773")
    elif faq == "FAQ 3":
        send_message(user_id, "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£:\n‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå ‚Äì ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå\n‡πÄ‡∏ß‡∏•‡∏≤ 8.00 - 17.00 ‡∏ô.\n(‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)")
    elif faq == "FAQ 4":
        send_message(user_id, "üè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:\n135/3 ‡∏´‡∏°‡∏π‡πà 13 ‡∏ã‡∏≠‡∏¢‡πÄ‡∏û‡∏ä‡∏£‡πÄ‡∏Å‡∏©‡∏° 91 ‡πÅ‡∏¢‡∏Å12\n‡∏ï.‡∏≠‡πâ‡∏≠‡∏°‡∏ô‡πâ‡∏≠‡∏¢, ‡∏≠.‡∏Å‡∏£‡∏∞‡∏ó‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ô, ‡∏à.‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£ 74130")
    elif faq == "FAQ 5":
        send_location(user_id)
    else:
        send_message(user_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö FAQ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô 'FAQ 1'")

def send_location(user_id):
    location_msg = {
        "type": "location",
        "title": "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏ö‡∏™‡∏ó‡πå ‡πÄ‡∏ß‡∏•‡∏•‡πå ‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å ‡∏à‡∏≥‡∏Å‡∏±‡∏î",
        "address": "135/3-4 ‡∏´‡∏°‡∏π‡πà 13 ‡∏ñ.‡πÄ‡∏û‡∏ä‡∏£‡πÄ‡∏Å‡∏©‡∏° 91 ‡∏ï.‡∏≠‡πâ‡∏≠‡∏°‡∏ô‡πâ‡∏≠‡∏¢ ‡∏≠.‡∏Å‡∏£‡∏∞‡∏ó‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ô ‡∏à.‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£",
        "latitude": 13.697285427411833,
        "longitude": 100.31582319730443
    }
    headers = {"Authorization": f"Bearer {LINE_ACCESS_TOKEN}", "Content-Type": "application/json"}
    message = {"to": user_id, "messages": [location_msg]}
    response = requests.post("https://api.line.me/v2/bot/message/push", headers=headers, json=message)
    print(f"üì§ ‡∏™‡πà‡∏á location ‡πÑ‡∏õ‡∏ó‡∏µ‡πà {user_id}: {location_msg}")
    print(f"üì° LINE Response: {response.status_code} {response.text}")

# ------------------ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ------------------

def send_services_menu(user_id):
    flex_message = {
        "type": "flex",
        "altText": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
        "contents": {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {"type": "text", "text": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", "weight": "bold", "size": "lg", "align": "center"},
                    {"type": "text", "text": "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:", "size": "sm", "margin": "md", "align": "center"},
                    {"type": "button", "style": "primary", "action": {"type": "message", "label": "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤", "text": "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤"}, "margin": "lg"},
                    {"type": "button", "style": "primary", "action": {"type": "message", "label": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", "text": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"}, "margin": "md"},
                    {"type": "button", "style": "primary", "action": {"type": "message", "label": "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "text": "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}, "margin": "md"}
                ]
            }
        }
    }
    send_flex_message(user_id, flex_message)

def process_services(user_id, message_text):
    if message_text == "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤":
        flex_message = {
            "type": "flex",
            "altText": "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤",
            "contents": {
                "type": "bubble",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {"type": "text", "size": "md", "text": "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤", "align": "center", "weight": "bold"},
                        {"margin": "md", "type": "text", "text": "1. ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏°‡πà‡∏û‡∏¥‡∏°‡∏û‡πå"},
                        {"margin": "md", "type": "text", "text": "2. ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å"},
                        {"margin": "md", "type": "text", "text": "3. ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤"},
                        {"margin": "lg", "type": "separator"},
                        {"type": "box", "layout": "vertical", "margin": "xl", "contents": [
                            {"type": "text", "align": "center", "weight": "bold", "size": "md", "text": "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á", "color": "#1DB446"},
                            {"type": "text", "margin": "md", "align": "center", "weight": "bold", "size": "md", "text": "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤", "color": "#1DB446"}
                        ]}
                    ]
                }
            }
        }
        send_flex_message(user_id, flex_message)
    elif message_text == "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á":
        flex_message = {
            "template": {
                "columns": [
                    {
                        "defaultAction": {"label": "View detail", "type": "uri", "uri": "https://bestwellplastic.com/product-category/best-seller/"},
                        "imageBackgroundColor": "#000000",
                        "actions": [{"type": "uri", "uri": "https://bestwellplastic.com/product-category/best-seller/", "label": "View detail"}],
                        "text": "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ",
                        "thumbnailImageUrl": "https://bestwellplastic.com/wp-content/uploads/2025/03/1678569-247x296.jpg",
                        "title": "BEST SELLER"
                    },
                    {
                        "text": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ‡∏ú‡πà‡∏≤‡∏ô Packaging ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πà",
                        "defaultAction": {"uri": "https://bestwellplastic.com/product-category/packaging/", "label": "View detail", "type": "uri"},
                        "thumbnailImageUrl": "https://bestwellplastic.com/wp-content/uploads/2018/09/packing-247x296.png",
                        "actions": [{"uri": "https://bestwellplastic.com/product-category/packaging/", "label": "View detail", "type": "uri"}],
                        "title": "Packaging",
                        "imageBackgroundColor": "#FFFFFF"
                    },
                    {
                        "imageBackgroundColor": "#000000",
                        "actions": [{"type": "uri", "uri": "https://bestwellplastic.com/product-category/fanpart/", "label": "View detail"}],
                        "title": "FAN PART",
                        "thumbnailImageUrl": "https://bestwellplastic.com/wp-content/uploads/2022/08/fan-cat-copy.jpg",
                        "defaultAction": {"uri": "https://bestwellplastic.com/product-category/fanpart/", "label": "View detail", "type": "uri"},
                        "text": "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏¢‡∏≤‡∏ß‡∏ô‡∏≤‡∏ô ‡πÄ‡∏¢‡πá‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"
                    },
                    {
                        "defaultAction": {"uri": "https://bestwellplastic.com/product-category/car-accessory/", "label": "View detail", "type": "uri"},
                        "thumbnailImageUrl": "https://bestwellplastic.com/wp-content/uploads/2018/09/Car-Accessory-247x296.png",
                        "title": "Car Accessory",
                        "actions": [{"type": "uri", "uri": "https://bestwellplastic.com/product-category/car-accessory/", "label": "View detail"}],
                        "imageBackgroundColor": "#000000",
                        "text": "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Å‡∏£‡πà‡∏á ‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à"
                    },
                    {
                        "actions": [{"type": "uri", "uri": "https://bestwellplastic.com/product-category/pump-motor-parts/", "label": "View detail"}],
                        "defaultAction": {"uri": "https://bestwellplastic.com/product-category/pump-motor-parts/", "label": "View detail", "type": "uri"},
                        "text": "‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡πÅ‡∏•‡∏∞‡∏ó‡∏£‡∏á‡∏û‡∏•‡∏±‡∏á",
                        "title": "Pump motor parts",
                        "imageBackgroundColor": "#000000",
                        "thumbnailImageUrl": "https://bestwellplastic.com/wp-content/uploads/2018/09/pum-247x296.png"
                    },
                    {
                        "title": "a Christmas tree",
                        "imageBackgroundColor": "#000000",
                        "thumbnailImageUrl": "https://bestwellplastic.com/wp-content/uploads/2018/09/crismas-247x296.png",
                        "defaultAction": {"type": "uri", "label": "View detail", "uri": "https://bestwellplastic.com/product-category/spare-a-christmas-tree/"},
                        "text": "‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö",
                        "actions": [{"uri": "https://bestwellplastic.com/product-category/spare-a-christmas-tree/", "type": "uri", "label": "View detail"}]
                    },
                    {
                        "actions": [{"label": "View detail", "type": "uri", "uri": "https://bestwellplastic.com/product-category/agricultural/"}],
                        "defaultAction": {"type": "uri", "uri": "https://bestwellplastic.com/product-category/agricultural/", "label": "View detail"},
                        "title": "Agricultural",
                        "imageBackgroundColor": "#000000",
                        "text": "‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏•‡πâ‡∏≥‡∏™‡∏°‡∏±‡∏¢",
                        "thumbnailImageUrl": "https://bestwellplastic.com/wp-content/uploads/2018/09/Agricultural-equipment-1-247x296.png"
                    },
                    {
                        "title": "Auto Parts",
                        "text": "‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏¢‡∏≤‡∏ß‡∏ô‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô",
                        "actions": [{"type": "uri", "label": "View detail", "uri": "https://bestwellplastic.com/product-category/auto-parts/"}],
                        "thumbnailImageUrl": "https://bestwellplastic.com/wp-content/uploads/2018/09/Auto-Parts-247x296.png",
                        "imageBackgroundColor": "#000000",
                        "defaultAction": {"uri": "https://bestwellplastic.com/product-category/auto-parts/", "label": "View detail", "type": "uri"}
                    },
                    {
                        "title": "Packing media",
                        "text": "‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
                        "defaultAction": {"type": "uri", "label": "View detail", "uri": "https://bestwellplastic.com/product-category/packing-media/"},
                        "actions": [{"uri": "https://bestwellplastic.com/product-category/packing-media/", "label": "View detail", "type": "uri"}],
                        "thumbnailImageUrl": "https://bestwellplastic.com/wp-content/uploads/2021/08/sddsfd-247x296.png",
                        "imageBackgroundColor": "#000000"
                    },
                    {
                        "thumbnailImageUrl": "https://bestwellplastic.com/wp-content/uploads/2018/09/Sanitary-product-247x296.png",
                        "actions": [{"type": "uri", "uri": "https://bestwellplastic.com/product-category/sanitary-product/", "label": "View detail"}],
                        "defaultAction": {"type": "uri", "uri": "https://bestwellplastic.com/product-category/sanitary-product/", "label": "View detail"},
                        "imageBackgroundColor": "#000000",
                        "title": "Sanitary product",
                        "text": "‡∏Å‡πâ‡∏≤‡∏ß‡∏•‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™"
                    }
                ],
                "imageSize": "cover",
                "type": "carousel",
                "imageAspectRatio": "rectangle"
            },
            "altText": "this is a carousel template",
            "type": "template"
        }
        send_flex_message(user_id, flex_message)
    elif message_text == "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
        flex_message = {
            "type": "flex",
            "altText": "Steps to order and design a mold",
            "contents": {
                "type": "bubble",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {"type": "text", "align": "center", "text": "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏û‡∏¥‡∏°‡∏û‡πå", "size": "sm", "weight": "bold"},
                        {"type": "text", "margin": "sm", "text": "1. ‡πÄ‡∏õ‡∏¥‡∏î PO (Purchase Order)"},
                        {"type": "text", "margin": "sm", "text": "2. ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"},
                        {"type": "text", "margin": "sm", "text": "3. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï"},
                        {"type": "text", "margin": "sm", "text": "4. ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï 15-30 ‡∏ß‡∏±‡∏ô"},
                        {"type": "text", "margin": "sm", "text": "5. ‡∏ö‡∏£‡∏£‡∏à‡∏∏‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"},
                        {"margin": "lg", "type": "separator"},
                        {"layout": "vertical", "contents": [
                            {"type": "text", "align": "center", "weight": "bold", "size": "sm", "text": "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á", "color": "#1DB446"},
                            {"type": "text", "margin": "md", "align": "center", "color": "#1DB446", "weight": "bold", "size": "sm", "text": "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤"}
                        ], "margin": "xl", "type": "box"}
                    ]
                }
            }
        }
        send_flex_message(user_id, flex_message)
    else:
        send_message(user_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤', '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'")

def send_flex_message(user_id, flex_message):
    headers = {"Authorization": f"Bearer {LINE_ACCESS_TOKEN}", "Content-Type": "application/json"}
    message = {"to": user_id, "messages": [flex_message]}
    response = requests.post("https://api.line.me/v2/bot/message/push", headers=headers, json=message)
    print(f"üì§ ‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏ó‡∏µ‡πà {user_id}: {flex_message}")
    print(f"üì° LINE Response: {response.status_code} {response.text}")

# ------------------ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ------------------

def start_questionnaire(user_id):
    USER_SESSIONS[user_id] = {"step": 1}
    send_message(
        user_id,
        "‚ú® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô ‚ú®\n\n"
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï:\n"
        "ABS, PC, Nylon, PP, PE, PVC, PET, PMMA, POM, PU"
    )

def process_response(user_id, message_text):
    if user_id not in USER_SESSIONS:
        send_message(user_id, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì'")
        return
    step = USER_SESSIONS[user_id]["step"]
    if step == 1:
        if message_text not in MATERIAL_COSTS:
            send_message(
                user_id,
                "‚ùå ‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å:\n"
                "ABS, PC, Nylon, PP, PE, PVC, PET, PMMA, POM, PU"
            )
            return
        USER_SESSIONS[user_id]["material"] = message_text
        USER_SESSIONS[user_id]["step"] = 2
        send_message(user_id, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô (‡∏Å‡∏ß‡πâ‡∏≤‡∏áx‡∏¢‡∏≤‡∏ßx‡∏™‡∏π‡∏á) cm\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 10.5x4.5x3")
    elif step == 2:
        USER_SESSIONS[user_id]["size"] = message_text
        USER_SESSIONS[user_id]["step"] = 3
        send_message(user_id, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)")
    elif step == 3:
        try:
            USER_SESSIONS[user_id]["quantity"] = int(message_text)
            USER_SESSIONS[user_id]["step"] = 4
            calculate_cost(user_id)
        except ValueError:
            send_message(user_id, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 100")
    elif step == 4:
        if message_text.strip() == "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£":
            send_message(
                user_id,
                "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n"
                "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
            )
            USER_SESSIONS[user_id]["step"] = 5
        else:
            send_message(
                user_id,
                "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' ‡πÉ‡∏´‡∏°‡πà"
            )
            del USER_SESSIONS[user_id]
    elif step == 5:
        info_parts = [part.strip() for part in message_text.split(",")]
        if len(info_parts) != 4:
            send_message(
                user_id,
                "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:\n"
                "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
            )
            return
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô full_name, tel, company, email
        full_name, tel, company, email = info_parts
        USER_SESSIONS[user_id]["user_info"] = {
            "full_name": full_name,
            "tel": tel,
            "company": company,
            "email": email
        }
        try:
            write_to_sheet(
                user_id,
                USER_SESSIONS[user_id]["material"],
                USER_SESSIONS[user_id]["size"],
                USER_SESSIONS[user_id]["quantity"],
                USER_SESSIONS[user_id]["volume"],
                USER_SESSIONS[user_id]["weight_kg"],
                USER_SESSIONS[user_id]["total_cost"],
                full_name,
                tel,
                company,
                email
            )
            write_to_bigquery(
                user_id,
                USER_SESSIONS[user_id]["material"],
                USER_SESSIONS[user_id]["size"],
                USER_SESSIONS[user_id]["quantity"],
                USER_SESSIONS[user_id]["volume"],
                USER_SESSIONS[user_id]["weight_kg"],
                USER_SESSIONS[user_id]["total_cost"],
                full_name,
                tel,
                company,
                email
            )
            send_message(
                user_id,
                "üéâ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏\n(‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2-3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£)"
            )
        except Exception as e:
            send_message(
                user_id,
                f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheets/BigQuery: {e}"
            )
        del USER_SESSIONS[user_id]

def calculate_cost(user_id):
    material = USER_SESSIONS[user_id]["material"]
    size = USER_SESSIONS[user_id]["size"]
    quantity = USER_SESSIONS[user_id]["quantity"]
    try:
        dimensions = list(map(float, size.split("x")))
        if len(dimensions) != 3:
            raise ValueError("Invalid dimensions")
        volume = dimensions[0] * dimensions[1] * dimensions[2]
        USER_SESSIONS[user_id]["volume"] = volume
    except Exception as e:
        send_message(
            user_id,
            "‚ùå ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô 10.5x4.5x3"
        )
        return
    material_cost_per_kg = MATERIAL_COSTS.get(material, 150)
    density = 1.05  # g/cm¬≥
    weight_kg = (volume * density) / 1000
    total_cost = weight_kg * quantity * material_cost_per_kg
    USER_SESSIONS[user_id]["weight_kg"] = weight_kg
    USER_SESSIONS[user_id]["total_cost"] = total_cost
    result_text = (
        "‚ú® ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ú®\n\n"
        f"‡∏ß‡∏±‡∏™‡∏î‡∏∏: {material}\n"
        f"‡∏Ç‡∏ô‡∏≤‡∏î: {size} cm¬≥\n"
        f"‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£: {volume:.2f} cm¬≥\n"
        f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: {weight_kg:.2f} kg\n"
        f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {quantity} ‡∏ä‡∏¥‡πâ‡∏ô\n"
        f"‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°: {total_cost:,.2f} ‡∏ö‡∏≤‡∏ó\n\n"
        "‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n"
        "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n"
        "‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'"
    )
    send_message(user_id, result_text)
    USER_SESSIONS[user_id]["step"] = 4

def write_to_sheet(user_id, material, size, quantity, volume, weight_kg, total_cost, full_name, tel, company, email):
    SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
    credentials, project_id = google.auth.default(scopes=SCOPES)
    service = build('sheets', 'v4', credentials=credentials)
    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö full_name, tel, company, email
    values = [
        [user_id, material, size, quantity, volume, f"{weight_kg:.2f}", f"{total_cost:,.2f}", full_name, tel, company, email]
    ]
    body = {'values': values}
    range_name = f"{SHEET_NAME}!A1"
    result = service.spreadsheets().values().append(
        spreadsheetId=SPREADSHEET_ID,
        range=range_name,
        valueInputOption="RAW",
        body=body
    ).execute()
    updated_cells = result.get('updates', {}).get('updatedCells', 0)
    print(f"{updated_cells} cells appended to Google Sheets.")

def write_to_bigquery(user_id, material, size, quantity, volume, weight_kg, total_cost, full_name, tel, company, email):
    client = bigquery.Client()
    project = client.project
    table_id = f"{project}.{BIGQUERY_DATASET}.{BIGQUERY_TABLE}"
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏¢‡∏Å
    rows_to_insert = [{
        "user_id": user_id,
        "material": material,
        "size": size,
        "quantity": quantity,
        "volume": volume,
        "weight_kg": weight_kg,
        "total_cost": total_cost,
        "full_name": full_name,
        "tel": tel,
        "company": company,
        "email": email
    }]
    errors = client.insert_rows_json(table_id, rows_to_insert)
    if errors:
        raise Exception(f"BigQuery insert errors: {errors}")
    else:
        print("Data inserted into BigQuery successfully.")

def send_message(user_id, text):
    headers = {"Authorization": f"Bearer {LINE_ACCESS_TOKEN}", "Content-Type": "application/json"}
    message = {"to": user_id, "messages": [{"type": "text", "text": text}]}
    response = requests.post("https://api.line.me/v2/bot/message/push", headers=headers, json=message)
    print(f"üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà {user_id}: {text}")
    print(f"üì° LINE Response: {response.status_code} {response.text}")

if __name__ == "__main__":
    MATERIAL_COSTS = load_material_costs()
    port = int(os.getenv("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
